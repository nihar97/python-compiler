The files here are intended to be helpful, NOT to limit what you can do.
>>Ignore them entirely, if you prefer!<<  However, as indicated in the handout,
whatever you turn in must satisfy the following criteria:

1. 'make' must compile your program from scratch, producing an executable
   file 'apyc' in this directory.
2. 'make check' must run all your tests against your ./apyc program.
3. 'make APYC=PROG check' must run all your tests against the program
   PROG.
4. The command
      ./apyc --phase=1 FOO1.py
   should produce AST file FOO1.ast.
5. The command
      ./apyc --phase=1 -o BAR FOO1.py
   will produce AST file BAR.
6. Likewise, --phase=2 produces decorated, semantically analyzed trees in 
   FOO1.dast and BAR.
7. --phase=3 or -S produces the result of compiling into your target language.
8. --phase=4 or no --phase or -S option produces an executable program 
   (compiling the result of -S with the runtime library in lib).
9. Your program must exit with code 1 if there are any errors in any of the
   files, or if there are other errors (such as missing, unreadable, 
   or unwritable files).  It must produce a proper error message for syntax
   errors.
8. Your program must exit with code 0 otherwise.

Don't let anything in your finished program remain mysterious to you.
Try to understand everything that's here, and if you can't, then feel
free to ask us what's going on.

We judge your program by how it runs ON THE INSTRUCTIONAL SYSTEMS.  It's 
no good protesting that it works at home; your "customer" is not running on 
your home setup!

Be sure to submit your program properly, by tagging your team's (NOT your
personal) committed project branch and pushing tags to the your instructional
repository.

Don't expect that just because you see a class in the skeleton, it is
complete.  Furthermore, you are free to change or discard ANY PART of
it as long as your final program works according to spec.

The tests are completely inadequate; be sure to augment them to cover the
language semantics.

If you add a new source file, be sure to modify Makefile appropriately,
and 'git add' it as well.  If you remove a file, modify Makefile and 
'git rm' the old file.  Whenever you add or remove a file, or add, 
remove or modify an #include statement, be sure to run 'make depend'.
This keeps the Makefile informed of what depends on what.

MANIFEST:

  Makefile:   General directions for building and testing the program.
  README:     This file.

  Directory src/
        Makefile    General instructions for building and testing the program.
	apyc.cc:    Contains the main program and some general utilities.
	apyc.h:     Some high-level interfaces between modules.
	ast.h:      Base classes for AST nodes.
	ast.cc:     Method definitions for base classes and
     	            definitions for a few widely used AST subtypes.
        exprs.cc:   AST subclass definitions for expression-related types.
	stmts.cc:   AST subclass definitions for statement-related types.
	tokens.cc:  Definitions of token (leaf) AST subclasses.
        types.cc:   Definitions of nodes representing types.
        environ.cc: Definitions for environs (symbol tables).
        decls.cc:   Definitions related to declarations.

        decls.h:    Definitions for Decls.
        unifier.h:  Definitions for unifiers.
        resolver.h: Definitions for type resolution of overloaded identifiers.
        code.h:     Definitions supporting code generation.
        
        ast-types.i Information about AST node types.

	ast-parser.y
        ast-lexer.l:     The AST reader/parser.

  lib/
      lib/prelude.py:   The standard prelude.
      lib/runtime.h:    Headers for compiled code.
      lib/runtime.cc:   Implementations of runtime rouines.     

  tests/
      test-proj3: A testing script for project 3.  Compiles
               programs into executable files, executes them, and checks
               results

      correct3/     Tests that are supposed to be correct programs
	       for phase 3:
	  hi.py, hi.std:
	       A sample program, input file, and expected output file.

      error3/       Tests that are supposed to cause runtime errors.
	  bad-subscript-1.py:
	       A sample erroneous program.
